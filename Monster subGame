#include <iostream>
#include <string>
#include <ctime> // for time()
#include <cstdlib> // for rand() and srand()


class Monster
{

  public:

    enum  MonsterType
    {
        Dragon,
        Goblin,
        Ogre,
        Orc,
        Skeleton,
        Troll,
        Vampire,
        Zombie,
        MAX_MONSTER_TYPES
    };
    Monster(MonsterType type, std::string name, std::string roar, int hitPoints)
        : m_type(type), m_name(name), m_roar(roar), m_hitPoints(hitPoints)
    {

    }
    std::string getTypeString(){
        switch (m_type) {
            case Dragon :
                return "Dragon";
            case Goblin :
                return "Goblin";
            case Ogre :
                return "Ogre";
            case Orc :
                return "Orc";
            case Skeleton :
                return "Skeleton";
            case Troll :
                return "Troll";
            case Vampire :
                return "Vampire";
            case Zombie :
                return "Zombie";
        }
        return "UN LISTED Monster";
    }
    void print(){
        std::cout << m_name << " the " << getTypeString() << " has "
                  << m_hitPoints << " hit points and says " << m_roar << '\n';
    }

  private:
    MonsterType m_type;
    std::string m_name;
    std::string m_roar;
    int m_hitPoints;

};

class MonsterGenerator
{
  private:
    static std::string s_names[6]{"11","22","33","44","55","66"};
    static std::string s_roars[6]{"1*","2*","3*","4*","5*","6*"};
  public:
    static int getRandomNumber(int min, int max)
    {
        static const double fraction = 1.0 / (static_cast<double>(RAND_MAX) + 1.0);
        return static_cast<int>(rand() * fraction * (max - min + 1) + min);
    }
    static Monster  generateMonster(){
        Monster::MonsterType type = static_cast<Monster::MonsterType >(
            getRandomNumber(0, Monster::MAX_MONSTER_TYPES)
        );
int idx=getRandomNumber(0,5);
        return Monster(type, s_names[idx],s_roars[idx], getRandomNumber(1,100));
    }
};

int main()
{
    srand(static_cast<unsigned int>(time(0))); // set initial seed value to system clock
    rand(); // If using Visual Studio, discard first random value

    Monster m = MonsterGenerator::generateMonster();
    m.print();

    return 0;
}
